#include <EEPROM.h>  // Electrically Erasable Programmable Read-Only Memory
#include <SPI.h>  // Serial Peripheral Interface
#include <RFID.h>  // Radio-Frequency IDentification
#include <Servo.h>  // Servo motor

/* RFID reader */
/*
RC522 MODULE    Uno/Nano    
SDA             D10
SCK             D13
MOSI            D11
MISO            D12
IRQ             N/A
GND             GND
RST             D9
3.3V            3.3V
*/
  
/* RFID reader pin definition */
/* SUNFOUNDER RFID-RC522 RFID Reader */
#define SDA_DIO 10  // SDA pin
#define RESET_DIO 9  // RST pin
#define delayRead 100 // Time delay 
#define delayLed 200
RFID RC522(SDA_DIO, RESET_DIO);  // RFID instance

/* Servos */
/* TowerPro MicroServo 9g SG90 Servo Motor */
#define servoOpen 10  // angle corresponding to "open" state
#define servoClosed 100  // angle corresponding to "closed" state
#define pinServoL 5  // Left-side servo signal pin
#define pinServoR 6  // Right-side servo signal pin
Servo myServoL;  // Servo instance
Servo myServoR;  // Servo instance

/* Distance Meters */
/* HC-SR04 Ultrasonic Sensor */
#define pinDistTrig 3  // Trigger pin
#define pinDistEchoL 2  // Echo pin for Left-side detector 
#define pinDistEchoR 4 // Echo pin for Right-side detector
// Delay between consecutive measurements
#define millsInterval 10000  // one distance read every 10 seconds
long mills=0;
long millsLast=0;

/* Leds */
#define pinLedL 7  // Left-side LED
#define pinLedR 8  // Right-side LED

struct Led {
  byte pin;
  long blinkInterval;  // in ms: 0=OFF; >100000=Always ON
  byte dutyCycle;  // time the LED stays ON in ms
  long lastMills;
  bool bState;  // LED State: true=LED ON; false=LED OFF
  void Manage() {  // manages the LED state according to the blinkInterval.
    long mills = millis();
    if(blinkInterval==0) {  // if blinkInterval=0, turn LED OFF
      if(bState) {
        bState=false;
        SetLed();
      }
    } else
    if(blinkInterval>=100000) {  // if blinkInterval>100000, turn LED ON
      if(!bState) {
        bState=true;
        SetLed();
      }
    } else
    if(mills-lastMills>blinkInterval) {  // blinking mode
      bState=!bState;  // change state so the LED blinks
      lastMills=mills;  // reset the lastMillis
      SetLed();
    }
  }
  void SetBlinkInterval(long blinkInterval, byte dutyCycle=50) {
    this->blinkInterval = blinkInterval;
    this->dutyCycle = dutyCycle;
    if(lastMills==0) lastMills=millis();  // if there is no time record, read from millis()
  }
  void SetLed() {
    digitalWrite(pin, bState?HIGH:LOW);  // turn the LED ON or OFF according to the state
  }
};
Led ledL = { pinLedL };  // create Led instances
Led ledR = { pinLedR };

// in order to manage more than one container
struct Jar {
  Servo* pServo;  // pointer to servo object
  byte pinServo;
  Led* pLed;  // pointer to Led object
}; 
Jar jarL = {&myServoL, pinServoL, &ledL};  // create Jar instances
Jar jarR = {&myServoR, pinServoR, &ledR};

// in initializing this object, insert the code of the accepted magnetic tags 
const byte NMaxCats = 4;  // maximum number of cats manageable
struct Cat {
  String name;  // cat's name
  String code;  // tag code
  byte nShakes;  //number of shakes per feeding event
  word secsMinDelay;  // minimum delay between consecutive meals
  Jar* pJar;  // pointer to Jar object
  long millsLastFeed;  // time since last meal in ms
  void Feed();  // to be defined
} vCats[NMaxCats]={  // vector of Cat instances
  {"Renato" , "14B4B19988", 5, 60, &jarL},
  {"Gattina", "A31BC027A", 5, 60, &jarR},
};
byte nCats=2;  // actual number of cats being handled

// saving the details of each Feed event on the EEPROM
// the EEPROM is addressed with a circular buffer data structure
struct Feeds {
  int offStart;  // memory offset where the data start
  int offActual;  // memory offset where the current data are written
  int sizeEEPROM;  // number of memory cells
  // Bit fields
  struct Feed {  // one Feed event is stored onto 2-bytes
    word iCat:2;  // 2 bits for the cat (max 4 cats -> 2 bits)
    word minsDelay:14;  // 14 bits to store the delay in minutes
  };
  void init() {  // initialize the adresses
    offStart=offActual=8+NMaxCats*24;  // identification string + Cat structures
    sizeEEPROM=EEPROM.length();  // number of bytes/addresses
  }
  void addFeed(byte iCat) {  // add a new Feed event to the buffer
    word wRead;
    struct Feed wWrite = {0};  // initialization
    if(iCat!=(byte)(-1)){  // -1 is used to mark the start of the data
      wWrite.iCat = iCat;
      wWrite.minsDelay=millis()/60000;  // minutes
    };
    if(iCat==(byte)(-1)) Serial.println(F("Feeds cat: start recording!"));
    else { Serial.print(F("Feeds cat")); Serial.println(iCat); }  // F: store on flash memory

    EEPROM.get(this->offActual, wRead);  // read the word at offActual
    if(wRead==(word)(-1)){  // first terminator
      if(this->offActual+2*sizeof(word)<=this->sizeEEPROM-sizeof(word)){
        EEPROM.get(this->offActual+sizeof(word), wRead);
        if(wRead==(word)(-1)){  // second terminator
          EEPROM.put(this->offActual+2*sizeof(word), (word)(-1));  // move the second terminator
        }
      }
      if(this->offActual+sizeof(word)<=this->sizeEEPROM-sizeof(word)){
        EEPROM.put(this->offActual+sizeof(word), (word)(-1));  // move the first terminator
      }
      EEPROM.put(this->offActual, wWrite); // write the feeding data
      this->offActual+=sizeof(word);  // increase offset
      if(this->offActual>=this->sizeEEPROM) this->offActual=this->offStart;
    } else {
      Serial.println(F("Feeds List Error: Absent terminator!"));
    }
  }
  void list() {
    int nFeeds=0;
    word wRead;
    EEPROM.get(this->offActual, wRead);
    if(wRead==(word)(-1)){  // first terminator
      if(this->offActual+2*sizeof(word)<=this->sizeEEPROM-sizeof(word)){
        EEPROM.get(this->offActual+sizeof(word), wRead);
        if(wRead==(word)(-1)){  // second terminator
          // I go no further
        } else {
          // vi e' un solo terminatore, parto da offActual+sizeof(word) fino alla fine e prosegue come per 2 terminatori
          int off = this->offActual+sizeof(word);
          // parto da offStart alla posizione offActual
          for(;off<=this->sizeEEPROM-sizeof(word);off+=sizeof(word)) {
            EEPROM.get(off,wRead);
            Serial.print(((Feed*)&wRead)->iCat);
            Serial.print(F(") "));
            Serial.print(((Feed*)&wRead)->minsDelay);
            Serial.println(F(" min"));
            nFeeds++;
          }
        }
      }
      // parto da offStart alla posizione offActual
      int off = this->offStart;
      for(;off<this->offActual;off+=sizeof(word)) {
        EEPROM.get(off,wRead);
        Serial.print(((Feed*)&wRead)->iCat);
        Serial.print(F(") "));
        Serial.print(((Feed*)&wRead)->minsDelay);
        Serial.println(F(" min"));
        nFeeds++;
      }
    }
    if(nFeeds==0) Serial.println(F("Nessuna dispensazione!!"));
  }
} feeds;

/* Per test printDelay() */
long millsTestLast=0;

void setup(){

  /* Setting some Serial parameters */ 
  Serial.begin(9600);  // baud rate
  Serial.setTimeout(100);  // wait 100 ms before timeout

  /* Abilitating the SPI*/
  SPI.begin();

  /* Initializing the RFID reader */
  RC522.init();

  /* Initializing the servos */
  InitServo(myServoL, pinServoL);
  InitServo(myServoR, pinServoR);

  /* Init Distance Meters */
  pinMode(pinDistTrig, OUTPUT); 
  pinMode(pinDistEchoL, INPUT); 
  pinMode(pinDistEchoR, INPUT); 

  // Gestione Leds
  pinMode(ledL.pin, OUTPUT); 
  pinMode(ledR.pin, OUTPUT); 
  ledL.SetBlinkInterval(100000);  // always ON
  ledR.SetBlinkInterval(100000);

  // Read data from EEPROM
  GetConfig();

  Serial.println(F("Setup OK"));
}

void loop()
{
  /* Distance Meters */
  mills=millis();  // read time
  
  if(mills-millsLast>=millsInterval) {
    //Serial.print(F("------------mills: ")); Serial.println(mills);
    millsLast = mills;
    ManageDistance(pinDistEchoL);  // set LED according to distance read
    ManageDistance(pinDistEchoR);
  }

  manageInput();
  
  // LED management
  ledL.Manage();
  ledR.Manage();

  // if a tag/card is read
  if (RC522.isCard())
  {
    // read its code
    RC522.readCardSerial();
    String codeRead="";

    printDelay(mills);
    Serial.println(F(" - Tag code read:"));
  
    // Write tag code to string
    for(byte i = 0; i <= 4; i++)
    {
      codeRead+= String (RC522.serNum[i],HEX);
      codeRead.toUpperCase();
    }
    Serial.println(codeRead);

    byte iCat=0;
    for(; iCat<nCats; ++iCat) {
      Cat& cat = vCats[iCat];
      if(verifyCode(codeRead,cat.code)) {  // check if codeRead == cat.code
        Serial.print(F("Authorization granted to "));
        Serial.println(cat.name);

        if(cat.millsLastFeed!=0 && mills-cat.millsLastFeed<cat.secsMinDelay*(long)1000) {
          Serial.println(F("Too soon!!"));
        } else {
          cat.millsLastFeed=mills;

          cat.Feed();

          feeds.addFeed(iCat);
        }
 
        break; // OK
      }
    }
    if(iCat>=nCats) {
      Serial.println(F("Authorization denied!!"));
    }
    delay(delayRead);
  }
}
// This function checks whether the code is authorized
boolean verifyCode(String codeRead, String codeAuthorized){
  if(codeRead.equals(codeAuthorized)){
    return true;
  }else{
    return false;
  }
}

void printDelay(long int mills) {
    Serial.print(mills/3600000);  // hours
    Serial.print(F("h "));
    Serial.print((mills%3600000)/60000);  // minutes
    Serial.print(F("m "));
    Serial.print((mills%60000)/1000);  // seconds
    Serial.print(F("."));
    Serial.print((mills%1000)/100);  // tenths of second
    Serial.print((mills%100)/10);  // hundredths of second
    Serial.print(F("s"));
}

 /* return distance in cm */
int ManageDistance(int pinDistEcho) {
  // lowers trigger signal
  digitalWrite( pinDistTrig, LOW );
  // send 10-microsecond trigger pulse
  digitalWrite( pinDistTrig, HIGH );
  delayMicroseconds( 10 );
  digitalWrite( pinDistTrig, LOW );

  long duration = pulseIn( pinDistEcho, HIGH );
  long distance = 0.0343 * duration / 2;

  Led* pLed = (pinDistEcho==pinDistEchoL)? &ledL : &ledR;
  if(distance<9) pLed->SetBlinkInterval(100000);  // always ON
  else if(distance<11) pLed->SetBlinkInterval(500);  // slow blinking
  else pLed->SetBlinkInterval(100);  // fast blinking
 
  // after 38ms we consider it out of reach
  Serial.print((pinDistEcho==pinDistEchoL)?F("L: "):F("R: "));
  Serial.print(F("distance: "));
  if( duration > 38000 ){
    Serial.println(F("Out of reach   "));
  }else{
    Serial.print(distance); 
    Serial.println(F("cm     "));
  }
  return distance;
}
// servo is initialized closed
void InitServo(Servo& servo,int pinServo) {
  servo.attach(pinServo);  // power on
  servo.write(servoClosed);  // closed state
  delay(600);  // wait 0.6 sec
  servo.detach();  // power off
}
// write Cat.Feed() function outside declaration
void Cat::Feed() {
  Serial.print(F("Feeding cat "));
  Serial.print(this->name);
  Serial.println(F("!!"));
  
  this->pJar->pServo->attach(this->pJar->pinServo);  // power on
  this->pJar->pServo->write(servoOpen);  // open state
  delay(200);  // wait 0.2 sec
  for(int i=0; i<this->nShakes; ++i) {  // shake
    this->pJar->pServo->write(servoOpen-10);
    delay(200);
    this->pJar->pServo->write(servoOpen+30);
    delay(200);
  }
  this->pJar->pServo->write(servoClosed);
  delay(600);
  this->pJar->pServo->detach();  // power off
}

void printCat(int iCat) {
  if(iCat>=0 && iCat<nCats) {
    Cat cat = vCats[iCat];
    Serial.print(iCat); Serial.print(F(") "));
    Serial.print(cat.name); Serial.print(F("; "));
    Serial.print(cat.code); Serial.print(F("; "));
    Serial.print(cat.nShakes); Serial.print(F("; "));
    Serial.print(cat.secsMinDelay); Serial.print(F("; "));
    Serial.print((cat.pJar==&jarL)?F("Left"):F("Right")); Serial.println(F(";"));
  } else {
    Serial.println(F("Wrong index!!"));
  }
}
void printCats() {
  Serial.print(F("Number of cats")); Serial.println(nCats);
  for(byte i=0; i<nCats; ++i) {
    printCat(i);
  }
}
void printFeeds(int iCat) {
  // Searching the EEPROM for the last feeds for the specified cat
  Serial.println(F("Nessuna dispensazione!!"));
}
void printFeeds() {
  // Searching the EEPROM for the last feeds
  feeds.list();
}
// READ CONFIGURATION FROM EEPROM FOR EVERY CAT.
// INITIALIZE TERMINATORS FOR FEED STORAGE.
void GetConfig() {
  
  // Feed manager initialization
  feeds.init();

  // Read data from EEPROM
  Serial.print(F("EEPROM.length() = "));  // bytes
  Serial.println(EEPROM.length());
  
  // Check that the data are of right kind: "FEEDER" label at 0 offset
  if(1) {
    const char IdFEEDER[] PROGMEM = "FEEDER";  // write string to flash memory
    char IdRead[7] = "";
    bool bOK=true;
    for(byte i=0; i<6; ++i) {  // read the first 6 bytes from EEPROM
      IdRead[i]=EEPROM[i];
      if(IdFEEDER[i]!=IdRead[i]) bOK=false;
    }
    Serial.println(IdRead);
    if(bOK) {
      Serial.println(F("Format OK!!"));
      // Read version bit and number of cats
      byte version = EEPROM[6];  // read 7th byte (version)
      if(version!=0) {
        Serial.println(F("Unknown version!!"));
        bOK=false;
      } else {
        Serial.println(F("Version OK!!"));

        int off=7;
        nCats = EEPROM[off];  // read 8th byte (cat number)
        off+=1;
        
        Serial.print(F("number of cats: "));
        Serial.println(nCats);
        if(nCats>NMaxCats) {
          Serial.print(F("Too many cats!! ("));
          Serial.print(nCats);
          Serial.print(F(">"));
          Serial.print(NMaxCats);
          Serial.println(F(")"));
          nCats=NMaxCats;
        }
        for(int j=0; j<nCats; ++j){  // for each cat
          Cat& cat = vCats[j];
          char bRead;  // single ASCII character (1B)
          cat.name="";
          for(byte i=0; i<8; ++i) {  // read name
            EEPROM.get(off+i, bRead); // Read cat.name
            if(bRead=='\0') break;
            cat.name+=bRead;
          }
          // Serial.print("Name: "); Serial.print(cat.name); Serial.println(";"); 
          off+=9;  // jump 9 bytes ahead
          cat.code="";
          for(byte i=0; i<10; ++i) {  // read code
            EEPROM.get(off+i, bRead);  // Read cat.code
            if(bRead=='\0') break;
            cat.code+=bRead;
          }
          // Serial.print("Code : "); Serial.print(cat.code); Serial.println(";");
          off+=11;  // jump 11 bytes ahead
          EEPROM.get(off, cat.nShakes);      // Read gatto.nShakes
          // Serial.print("Shakes: "); Serial.print(cat.nShakes); Serial.println(";");
          off+=1;  // jump 1 byte ahead
          EEPROM.get(off, cat.secsMinDelay); // Read cat.secsMinDelay
          // Serial.print("Delay(min): "); Serial.print(cat.secsMinDelay); Serial.println(";");
          off+=2;  // jump 2 bytes ahead
          EEPROM.get(off, bRead);            // Read cat.jar
          // Serial.print("Jar: "); Serial.print((bRead=='L')? "Left" : "Right"); Serial.println(";"); 
          cat.pJar=(bRead=='L')? &jarL : &jarR;  // assign pointer
          off+=1;  // jump 1 byte ahead
        }
        printCats();  // print data of all cats found
        
        // Find address where to start writing feeds
        feeds.offActual=feeds.offStart;  // initialize offActual
        // Search for first terminator
        word wRead;
        for(;feeds.offActual<=feeds.sizeEEPROM-sizeof(word);feeds.offActual+=sizeof(word)) {
          EEPROM.get(feeds.offActual,wRead);
          if(wRead==(word)(-1)) break;  // End search
        }
        // What if the terminator is not found?
        if(feeds.offActual>feeds.sizeEEPROM-sizeof(word)) {
          // No terminator. Initializing now.
          Serial.println(F("Feeds List Not Found!! "));
          Serial.print(F("Feeds List Init at ")); Serial.println(feeds.offStart);
          feeds.offActual=feeds.offStart;
          EEPROM.put(feeds.offActual,(word)(-1));
          EEPROM.put(feeds.offActual+sizeof(word),(word)(-1));
        }
        feeds.addFeed(-1); // Signal registration start
      }
    } else {
      Serial.println(F("Unknown format!!"));
    }
    if(!bOK) {
      Serial.println(F("Formatting EEPROM!!"));
      for(byte i=0; i<6; ++i) {
        EEPROM.update(i,IdFEEDER[i]); // Write IdFEEDER
      }
      EEPROM.update(6, 0); // Write version
      
      int off = updateCats();  // write data for all cats and return offset to write on
      
      // Check offset is correct
      if(feeds.offStart!=off) Serial.println(F("EEPROM Formatting Error!!!"));
      // Initialize terminators
      Serial.print(F("Feeds List Init at ")); Serial.println(feeds.offStart);
      feeds.offActual=feeds.offStart;
      EEPROM.put(feeds.offActual, (word)(-1));
      EEPROM.put(feeds.offActual+sizeof(word), (word)(-1));
      feeds.addFeed(-1); // Signal registration start
    }
  }
}
int updateCats() {
  int off=7;  // after "FEEDER" & version
  EEPROM.update(off, nCats); // Write cat number
  off+=1;
  for(int ic=0; ic<NMaxCats; ++ic){  // for each cat...
    Cat cat = vCats[ic];
    for(byte i=0; i<min(8, cat.name.length())+1; ++i) {
      EEPROM.put(off+i, cat.name[i]); // ...write cat.name
    }
    off+=9;
    for(byte i=0; i<min(10,cat.code.length())+1; ++i) {
      EEPROM.put(off+i, cat.code[i]);  // ...write cat.code
    }
    off+=11;
    EEPROM.put(off, cat.nShakes);      // ...write cat.nShakes
    off+=1;
    EEPROM.put(off, cat.secsMinDelay); // ...write cat.secsMinDelay
    off+=2;
    EEPROM.put(off, (cat.pJar==&jarL)?'L':'D'); // ...write cat.jar
    off+=1;
  }
  return off;
}

void manageInput(){
  byte state=0;
  byte cmd='\0';
  byte iCat=0;
  String str;
  // Serial.available() returns the number of bytes available in the Serial Receive buffer
  while(Serial.available()>0) {
    // TODO: configuration
    /* Read one character at a time. Every command is made up of a letter and a colon (':'), followed by 1 or more parameters and ending with a newline ('/n'). */
    byte ch = Serial.read();
    if(state==99) continue; // Empty the buffer
    //Serial.print(ch); // Echo
    //Serial.print(F(" - state = "));
    //Serial.println(state);
    if(ch=='\n'||ch=='\r') continue; /*Not taken into account!!*/
    if(state==0) cmd=ch;
    if(state==1) if(ch!=':') { state=0; cmd=ch; } /*Reset*/
                 else { // Check whether the command is correct
                   if(cmd=='+');  // Add cat
                   if(cmd=='-');  // Remove cat
                   if(cmd=='N');  // Set cat's name
                   if(cmd=='C');  // Set RFID code
                   if(cmd=='#');  // Set number of shakes
                   if(cmd=='S');  // Minimum delay in seconds between feeds
                   if(cmd=='J');  // Set corresponding jar
                   if(cmd=='!');  // List last feeds
                   if(cmd=='?');  // Return configuration
                 }
    if(state==2) iCat=ch-'0';
    if(state==3) if(ch!=':') { state=99; cmd=ch; } /*Empty buffer and exit*/
                 else {
                   if(cmd=='#') {  // Set number of shakes
                     // Read an integer
                     //num = Serial.parseInt();
                     str = Serial.readString();
                     state++;
                   }
                   if(cmd=='J') {  // Set corresponding jar
                     // Accepts 0, 1 or L, R or l, r
                     //ch = Serial.read();
                     str = Serial.readString();
                     state++;
                   }
                   if(cmd=='S') {  // Minimum delay in seconds between feeds
                     //num = Serial.parseInt();
                     str = Serial.readString();
                     state++;
                   }
                   if(cmd=='N') {  // Set cat's name
                     str = Serial.readString();
                     state++;
                   }
                   if(cmd=='C') {  // Set RFID code
                     str = Serial.readString();
                     state++;
                   }
                 }
    state++;  // increase state
  }
  if(state==5 && cmd=='#') {  // Set number of shakes
    Serial.println();
    if(iCat>=0 && iCat<nCats) {
      Cat& cat=vCats[iCat];
      byte bNum = str.toInt();
      Serial.print(iCat); Serial.print(F(") bNum=")); Serial.println(bNum);
      cat.nShakes = bNum;
      updateCats();
      printCat(iCat);
    } else {
      Serial.println(F("Wrong cat index!!"));
    }
    Serial.println();
  } else
  if(state==5 && cmd=='S') {  // Minimum delay in seconds between feeds
    Serial.println();
    if(iCat>=0 && iCat<nCats) {
      Cat& cat=vCats[iCat];
      int num = str.toInt();
      Serial.print(iCat); Serial.print(F(") num=")); Serial.println(num);
      cat.secsMinDelay = num;
      updateCats();
      printCat(iCat);
    } else {
      Serial.println(F("Wrong cat index!!"));
    }
    Serial.println();
  } else
  if(state==5 && cmd=='J') {  // Set corresponding jar
    Serial.println();
    if(iCat>=0 && iCat<nCats) {
      Cat& cat=vCats[iCat];
      char ch = str[0];
      Serial.print(iCat); Serial.print(F(") ch=")); Serial.println(ch);
      if(ch=='0'||ch=='L'||ch=='l') cat.pJar=&jarL;
      else if(ch=='1'||ch=='R'||ch=='r') cat.pJar=&jarR;
      else Serial.println(F("Jar not found!!"));
      updateCats();
      printCat(iCat);
    } else {
      Serial.println(F("Wrong cat index!!"));
    }
    Serial.println();
  } else
  if(state==5 && cmd=='N') {  // Set cat's name
    Serial.println();
    if(iCat>=0 && iCat<nCats) {
      Cat& cat=vCats[iCat];
      Serial.print(iCat); Serial.print(F(") str=")); Serial.println(str);
      cat.name=str.substring(0,8);
      updateCats();
      printCat(iCat);
    } else {
      Serial.println(F("Wrong cat index!!"));
    }
    Serial.println();
  } else
  if(state==5 && cmd=='C') {  // Set RFID code
    Serial.println();
    if(iCat>=0 && iCat<nCats) {
      Cat& cat=vCats[iCat];
      Serial.print(iCat); Serial.print(F(") str=")); Serial.println(str);
      cat.code=str.substring(0,10);
      updateCats();
      printCat(iCat);
    } else {
      Serial.println(F("Wrong cat index!!"));
    }
    Serial.println();
  } else
  if(state==3 && cmd=='-') {  // Remove cat
    Serial.println();
    if(iCat>=0 && iCat<nCats) {
      Cat& cat=vCats[iCat];
      Serial.println(F("Remove cat:"));
      printCat(iCat);
      Serial.println();
      for(++iCat; iCat<nCats; ++iCat) {
        vCats[iCat-1]=vCats[iCat];
      }
      nCats--;
      updateCats();
      printCats();
    } else {
      Serial.println(F("Wrong cat index!!"));
    }
    Serial.println();
  } else
  if(state==3 && cmd=='+') {  // Duplicates cat
    Serial.println();
    if(iCat>=0 && iCat<nCats) {
      Cat& cat=vCats[iCat];
      if(nCats<NMaxCats) {
        nCats++;
        for(byte ig=nCats-1; ig>iCat; --ig) {
          vCats[ig]=vCats[ig-1];
        }
        updateCats();
        printCats();
      } else {
        Serial.println(F("Too many cats!!"));
      }
    } else {
      Serial.println(F("Wrong cat index!!"));
    }
    Serial.println();
  } else
  if(state==1 && cmd=='+') {  // Duplicates last cat 
    Serial.println();
    if(nCats<NMaxCats) {
      nCats++;
      if(nCats>1) {
         vCats[nCats-1]=vCats[nCats-2];
      }
      updateCats();
      printCats();
    } else {
      Serial.println(F("Too many cats!!"));
    }
    Serial.println();
  } else
  if(state==3 && cmd=='!') {  // Show last feeds for this cat
    Serial.println();
    if(iCat>=0 && iCat<nCats) {
      printFeeds(iCat);
    } else {
      Serial.println(F("Wrong cat index!!"));
    }
    Serial.println();
  } else
  if(state==1 && cmd=='!') {  // Show last feeds for all cats
    Serial.println();
    printFeeds();
    Serial.println();
  } else
  if(state==3 && cmd=='?') {  // Show selected cat
    Serial.println();
    printCat(iCat);
    Serial.println();
  } else
  if(state==1 && cmd=='?') {  // Show list of cats
    Serial.println();
    printCats();
    Serial.println();
  } else
  if(state!=0 && state!=99) {
    Serial.println(F("Wrong command!!"));
  }
}
